# -*- coding: utf-8 -*-
"""Untitled30.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bYxXmK_hYpKrdMPc3_sp5o1OSslbHJIC
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import missingno as msno

pd.set_option("display.max_columns", None)
plt.style.use("default")

df = pd.read_csv("index.csv")

df.shape

df.head()



df.info()

df.isnull().sum()

df.describe()

msno.bar(df)
plt.show()

msno.heatmap(df)
plt.show()

cat_cols = df.select_dtypes(exclude=np.number).columns

for col in cat_cols:
    print(f"\nTop values for {col}:")
    print(df[col].value_counts().head(10))

    plt.figure(figsize=(8,4))
    sns.countplot(y=df[col], order=df[col].value_counts().index[:10])
    plt.title(f"Top Categories of {col}")
    plt.show()

num_cols = df.select_dtypes(include=np.number).columns

# Histograms
df[num_cols].hist(figsize=(12, 8), bins=30)
plt.tight_layout()
plt.show()

# Boxplots
for col in num_cols:
    plt.figure()
    sns.boxplot(x=df[col])
    plt.title(f"Boxplot of {col}")
    plt.show()

plt.figure(figsize=(10, 6))
sns.heatmap(df[num_cols].corr(), annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

for col in num_cols:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    outliers = df[(df[col] < (Q1 - 1.5 * IQR)) | (df[col] > (Q3 + 1.5 * IQR))]
    print(f"{col}: {len(outliers)} outliers")

if "Date" in df.columns:
    df["Date"] = pd.to_datetime(df["Date"], errors="coerce")
    df = df.sort_values("Date")

    plt.figure(figsize=(12, 5))
    plt.plot(df["Date"], df[num_cols[0]])
    plt.title(f"{num_cols[0]} over Time")
    plt.xlabel("Date")
    plt.ylabel(num_cols[0])
    plt.xticks(rotation=45)
    plt.show()

if len(cat_cols) > 0 and len(num_cols) > 0:
    group_col = cat_cols[0]
    num_col = num_cols[0]

    grouped = df.groupby(group_col)[num_col].mean().sort_values(ascending=False)
    print(grouped.head(10))

    grouped.plot(kind="bar", figsize=(8,4), title=f"Average {num_col} by {group_col}")
    plt.show()

sns.pairplot(df[num_cols], diag_kind="kde")
plt.show()

for col in num_cols:
    plt.figure(figsize=(8,4))
    sns.histplot(df[col], kde=True, bins=30)
    plt.title(f"Distribution of {col}")
    plt.show()

for col in num_cols:
    plt.figure(figsize=(8,4))
    sns.violinplot(x=df[col])
    plt.title(f"Violin Plot of {col}")
    plt.show()

if len(num_cols) >= 2:
    plt.figure(figsize=(8,6))
    sns.scatterplot(x=df[num_cols[0]], y=df[num_cols[1]])
    plt.title(f"{num_cols[0]} vs {num_cols[1]}")
    plt.show()

for col in cat_cols:
    plt.figure(figsize=(10,4))
    sns.countplot(x=df[col], order=df[col].value_counts().index[:10])
    plt.title(f"Top Categories of {col}")
    plt.xticks(rotation=45)
    plt.show()

for col in cat_cols[:2]:
    plt.figure(figsize=(6,6))
    df[col].value_counts().head(5).plot(kind="pie", autopct="%1.1f%%")
    plt.title(f"Top 5 Categories in {col}")
    plt.ylabel("")
    plt.show()

if len(cat_cols) > 0 and len(num_cols) > 0:
    for col in num_cols[:2]:
        plt.figure(figsize=(10,5))
        sns.boxplot(x=df[cat_cols[0]], y=df[col])
        plt.title(f"{col} by {cat_cols[0]}")
        plt.xticks(rotation=45)
        plt.show()

